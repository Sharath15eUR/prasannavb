1. CHILD PROCESS:
    fork() is a system call in Unix/Linux that is used to create a new process.
    The newly created process is called the child process, and the one that called fork() is the parent process.
    It returns difference values such as : 0-> child , -1->Failure during creation , child PID to the parent process
    The child process inherits a copy of the parent memory and execution context but runs independently.

2. HANDLING COMMON SIGNAL:
Signals are the software interuppts that used to notify a process that an event has occured.The lifecycle of signal includes generation of signal and it deleivers to the process and the process will handle the signal using signal handler
Handling the common signal is essential for scalable application and here are the commong signals that need to be handled 
Common Signals:
		-SIGINT: Interrupt signal (usually generated by pressing Ctrl+C). It causes a process to terminate.
		-SIGKILL: Forces a process to terminate immediately. Cannot be caught or ignored.
		-SIGTERM: Termination signal, can be caught or ignored by processes.
		-SIGSEGV: Segmentation fault, caused by invalid memory access.
		-SIGCHLD: Sent to a parent process when one of its child processes terminates.


3. KERNEL CRASH:
    A kernel crash occurs when the operating system kernel encounters a fatal error from which it cannot safely recover.The reuslt can be 
    1.Kernel panic 2.Blue screen of death
Common Causes:
	-Null Pointer Dereference: When the kernel tries to access memory through a pointer that is NULL, leading to a crash.
	-Memory Corruption: A crash can occur due to improper memory handling, such as buffer overflows.
	-Division by Zero: When the kernel attempts to divide a value by zero.
	-Deadlocks: When processes or threads are waiting for each other indefinitely, leading to a system freeze.
	-Device Driver Bugs: Faulty or incompatible device drivers can crash the kernel.

Preventive Measures:
	-Memory Protection: Techniques like Address Space Layout Randomization (ASLR) can help prevent certain types of kernel crashes.
	-Proper Driver Handling: Ensuring device drivers are well-tested can minimize kernel crashes.


4. TIME COMPLEXITY:
Time complexity is a way to describe how the runtime of an algorithm increases with the size of the input. It helps analyze the efficiency of algorithms by expressing the number of basic operations in terms of input size, usually using Big O notation (e.g O(1), O(n), O(log n), O(n²)).
example - Linear search - O(n)

5.MUTEX/SPIN LOCK:
Locking is a mechanism used in concurrent programming to prevent multiple threads from accessing shared resources simultaneously, ensuring data consistency.
A mutex is a synchronization primitive used to prevent multiple threads from accessing shared resources at the same time in multithreaded programs.
A spinlock is a lock where a thread continuously loops (spins), checking if the lock is available — instead of sleeping.
